PCClassBuilder
	superclass: #PCObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #( #superclass #name #instVarNames #classVariablesNames #formats );
	classVariables: #();
	package: #'PharoCandle-Kernel-Classes'.

PCClassBuilder >> initialize
[
	super initialize.
	instVarNames := ''.
	classVariablesNames := ''.
	superclass := PCObject.
	self bePointers.
]

PCClassBuilder >> build
[
	| metaclass theClass supermetaclass |
	supermetaclass := superclass ifNil: [ PCClass ] ifNotNil: [ superclass class ].
	
	metaclass := PCMetaclass new.
	metaclass superclass: supermetaclass.
	metaclass setFormat: supermetaclass format.
	
	theClass := metaclass basicNew initialize.
	
	theClass superclass: superclass.
	theClass setFormat: self newClassFormat.

	theClass instVarNames: instVarNames asArray.
	theClass name: name.
	
	theClass classVariables: PCDictionary new.
	
	self classVariableNames do: [ :varName | theClass classVariables at: varName put: nil ].
	
	metaclass soleInstance: theClass.
	^ theClass.
]

PCClassBuilder >> newClassFormat
[
	"<2 bits of size><5 bits of compact class index><4 bits of inst spec><6 bits of size><1 bit with a 0>"
	
	| size1 instSpec size2 compactClassIndex |
	size1 := (self instSize + 1 // 64) bitAnd: 16r3.
	instSpec := self isCompiledMethod
					ifTrue: [ 12 ]
					ifFalse: [self isWeak
						ifTrue:[ 4 ]
						ifFalse:[self isPointers
									ifTrue: [ self isVariable
												ifTrue: [ self instSize > 0 ifTrue: [ 3 ] ifFalse: [ 2 ] ]
												ifFalse: [ self instSize > 0 ifTrue: [ 1 ] ifFalse: [ 0 ] ]
											]
									ifFalse: [ self isWords ifTrue: [ 6 ] ifFalse: [ 8 ] ]
								]
					].
	size2 := (self instSize + 1 \\ 64) bitAnd: 16r3F.
	
	compactClassIndex := self compactClassIndex.
	
	^(size1 bitShift: 16) + (compactClassIndex bitShift: 11) + (instSpec bitShift: 7) + (size2 bitShift: 1)
]

PCClassBuilder >> compactClassIndex
[
	^ self compactClassIndexFor: name
]

PCClassBuilder >> isCompiledMethod
[
	^ formats includes: #compiledMethod
]

PCClassBuilder >> beCompiledMethod
[
	^ formats := #( compiledMethod variable bytes )
]

PCClassBuilder >> isWeak
[
	^ formats includes: #weak
]

PCClassBuilder >> beWeak
[
	^ formats := #( weak variable pointers )
]

PCClassBuilder >> isPointers
[
	^ formats includes: #pointers
]

PCClassBuilder >> bePointers
[
	^ formats := #( pointers )
]

PCClassBuilder >> isVariable
[
	^ formats includes: #variable
]

PCClassBuilder >> beVariable
[
	^ formats := #( variable pointers )
]

PCClassBuilder >> isWords
[
	^ formats includes: #words
]

PCClassBuilder >> beWords
[
	^ formats := #( variable words )
]

PCClassBuilder >> beBytes
[
	self isCompiledMethodClassIndex ifTrue: [ ^ self beCompiledMethod ].
	^ formats := #( variable bytes )
]

PCClassBuilder >> instSize
[
	^ (superclass ifNil: [0] ifNotNil: [ superclass instSize ]) + instVarNames size
]

PCClassBuilder >> classVariableNames
[
	^ classVariablesNames
]

PCClassBuilder >> superclass: aClass
[
	superclass := aClass
]

PCClassBuilder >> name: aName
[
	name := aName
]

PCClassBuilder >> instVarNames: anArray
[
	instVarNames := anArray
]

PCClassBuilder >> classVariableNames: anArray
[
	classVariablesNames := anArray
]

PCClassBuilder >> isCompiledMethodClassIndex
[
	^ (self compactClassIndexFor: name) == (self compactClassIndexFor: #PCCompiledMethod)
]

PCClassBuilder >> compactClassIndexFor: aClassName
[
	^ #(#PCCompiledMethod
		nil
		#PCArray
		#PCLargeNegativeInteger
		#PCLargePositiveInteger
		#PCFloat
		nil
		#PCAssociation
		#PCPoint
		#PCRectangle
		#PCString
		#PCBlock
		nil
		#PCContext
		nil
		nil "#PCBitmap"
		nil
		nil
		nil
		nil
		nil
		nil
		nil
		nil
		nil
		nil
		nil
		nil
		nil
		nil
		nil) indexOf: aClassName ifAbsent: [ 0 ]
]