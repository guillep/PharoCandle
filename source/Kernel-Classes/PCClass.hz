PCClass
	superclass: #PCBehavior;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#instVarNames #classVariables #unused #name);
	classVariables: #();
	package: #'PharoCandle-Kernel-Classes'.

PCClass >> classVariables
[
	"Answer the dictionary of class variables that I share with my sole instance, or nil if I have none."
	^ classVariables
]

PCClass >> classVariables: aDictionary
[
	"Answer the dictionary of class variables that I share with my sole instance, or nil if I have none."
	^ classVariables := aDictionary
]


PCClass >> initFrom: aPharoClass methodDict: newMethodDict
[
	"Fill in my instance variables from the given Class using the given MethodDictionary."
	superclass := PCObject.	"corrected later"
	methodDict := newMethodDict.
	format := aPharoClass format.
	name := (aPharoClass name copyFrom: 2 to: aPharoClass name size) asSymbol.	"omit leading M"
	instVarNames := aPharoClass instVarNames.
	classVariables := aPharoClass classPool.
	instVarNames size = 0
		ifTrue: [ instVarNames := nil ].
		classVariables size = 0
		ifTrue: [ classVariables := nil ]
]

PCClass >> instVarNames: anArray
[
	instVarNames := anArray.
]

PCClass >> instVarNames
[
	"Answer an Array of the receiver's instance variable names."
	instVarNames ifNil: [ ^ #() ].
	^ instVarNames
]

PCClass >> isMeta
[
	^ false
]

PCClass >> name
[
	^ name
]

PCClass >> name: aSymbol
[
	name := aSymbol
]

PCClass >> theNonMetaClass
[
	^ self
]

PCClass >> classSide
[
	^ self class
]

PCClass >> newClassBuilderForSubclass: subclassName instanceVariableNames: instVarNames classVariableNames: classVarNames
[
	^ PCClassBuilder new
		superclass: self;
		name: subclassName;
		instVarNames: instVarNames;
		classVariableNames: classVarNames;
		yourself
]

PCClass >> subclass: subclassName instanceVariableNames: someInstVarNames classVariableNames: classVarNames
[
	^ (self newClassBuilderForSubclass: subclassName instanceVariableNames: someInstVarNames classVariableNames: classVarNames)
		build
]

PCClass >> variableSubclass: subclassName instanceVariableNames: someInstVarNames classVariableNames: classVarNames
[
	^ (self newClassBuilderForSubclass: subclassName instanceVariableNames: someInstVarNames classVariableNames: classVarNames)
		beVariable;
		build
]

PCClass >> variableByteSubclass: subclassName instanceVariableNames: someInstVarNames classVariableNames: classVarNames
[
	^ (self newClassBuilderForSubclass: subclassName instanceVariableNames: someInstVarNames classVariableNames: classVarNames)
		beBytes;
		build
]

PCClass >> variableWordSubclass: subclassName instanceVariableNames: someInstVarNames classVariableNames: classVarNames
[
	^ (self newClassBuilderForSubclass: subclassName instanceVariableNames: someInstVarNames classVariableNames: classVarNames)
		beWords;
		build
]

PCClass >> weakSubclass: subclassName instanceVariableNames: someInstVarNames classVariableNames: classVarNames
[
	^ (self newClassBuilderForSubclass: subclassName instanceVariableNames: someInstVarNames classVariableNames: classVarNames)
		beWeak;
		build
]

PCClass class
	instanceVariables: #().

