PCDictionary
	superclass: #PCSet;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #();
	classVariables: #();
	package: #'PharoCandle-Kernel-Collections-Unordered'.

PCDictionary >> add: anAssociation
[
| index element |
index := self findElementOrNil: anAssociation key.
element := array at: index.
element == nil
	ifTrue: [ self atNewIndex: index put: anAssociation ]
	ifFalse: [ element value: anAssociation value ].
^ anAssociation
]

PCDictionary >> associationAt: key
[
^ self associationAt: key ifAbsent: [ self errorKeyNotFound ]
]

PCDictionary >> associationAt: key ifAbsent: aBlock
[
	"Answer the association with the given key.
	If key is not found, return the result of evaluating aBlock."
| index assoc |
index := self findElementOrNil: key.
assoc := array at: index.
nil == assoc
	ifTrue: [ ^ aBlock value ].
^ assoc
]

PCDictionary >> associationsDo: aBlock
[
	"Evaluate aBlock for each of the receiver's elements (key/value 
	associations)."
super do: aBlock
]

PCDictionary >> at: key
[
	"Answer the value associated with the key."
^ self at: key ifAbsent: [ self errorKeyNotFound ]
]

PCDictionary >> at: key ifAbsent: aBlock
[
| index assoc |
index := self findElementOrNil: key.
assoc := array at: index.
nil == assoc
	ifTrue: [ ^ aBlock value ].
^ assoc value
]

PCDictionary >> at: key put: anObject
[
	"Set the value at key to be anObject.  If key is not found, create a new
	entry for key and set is value to anObject. Answer anObject."
| index element |
index := self findElementOrNil: key.
element := array at: index.
element == nil
	ifTrue: [ self atNewIndex: index put: (PCAssociation key: key value: anObject) ]
	ifFalse: [ element value: anObject ].
^ anObject
]

PCDictionary >> collect: aBlock
[
	"Evaluate aBlock with each of my values as the argument. Collect the resulting values into a collection that is like me. Answer with the new collection."
| newCollection |
newCollection := PCOrderedCollection new: self size.
self do: [ :each | newCollection add: (aBlock value: each) ].
^ newCollection
]

PCDictionary >> copy
[
	"Must copy all my associations or later stores into either dictionary will effect both the original and the copy."
^ self basicCopy
	withArray:
		(array collect: [ :assoc | assoc ifNil: [ nil ] ifNotNil: [ PCAssociation key: assoc key value: assoc value ] ])
]

PCDictionary >> do: aBlock
[
super do: [ :assoc | aBlock value: assoc value ]
]

PCDictionary >> errorKeyNotFound
[
self error: 'key not found'
]

PCDictionary >> errorValueNotFound
[
self error: 'value not found'
]

PCDictionary >> includes: anObject
[
self
	do: [ :each | 
		anObject = each
			ifTrue: [ ^ true ] ].
^ false
]

PCDictionary >> includesKey: key
[
	"Answer whether the receiver has a key equal to the argument, key."
| index |
index := self findElementOrNil: key.
(array at: index) == nil
	ifTrue: [ ^ false ]
	ifFalse: [ ^ true ]
]

PCDictionary >> keyAt: index
[
	"May be overridden by subclasses so that fixCollisions will work"
| assn |
assn := array at: index.
assn == nil
	ifTrue: [ ^ nil ]
	ifFalse: [ ^ assn key ]
]

PCDictionary >> keyAtValue: value
[
	"Answer the key that is the external name for the argument, value. If 
	there is none, answer nil."
^ self keyAtValue: value ifAbsent: [ self errorValueNotFound ]
]

PCDictionary >> keyAtValue: value ifAbsent: exceptionBlock
[
	"Answer the key that is the external name for the argument, value. If 
	there is none, answer the result of evaluating exceptionBlock.
	: Use =, not ==, so stings like 'this' can be found.  Note that MethodDictionary continues to use == so it will be fast."
self
	associationsDo: [ :association | 
		value = association value
			ifTrue: [ ^ association key ] ].
^ exceptionBlock value
]

PCDictionary >> keys
[
	"Answer a Set containing the receiver's keys."
| aSet |
aSet := PCSet new: self size.
self keysDo: [ :key | aSet add: key ].
^ aSet
]

PCDictionary >> keysDo: aBlock
[
	"Evaluate aBlock for each of the receiver's keys."
self associationsDo: [ :association | aBlock value: association key ]
]

PCDictionary >> noCheckAdd: anObject
[
	"Must be defined separately for Dictionary because (self findElementOrNil:) expects a key, not an association.  9/7/96 tk"
array at: (self findElementOrNil: anObject key) put: anObject.
tally := tally + 1
]

PCDictionary >> printOn: aStream
[
aStream nextPutAll: self class name , ' ('.
self
	associationsDo: [ :element | 
		element printOn: aStream.
		aStream space ].
aStream nextPut: $)
]

PCDictionary >> remove: anObject
[
self shouldNotImplement
]

PCDictionary >> remove: anObject ifAbsent: exceptionBlock
[
self shouldNotImplement
]

PCDictionary >> removeKey: key
[
	"Remove key from the receiver.
	If key is not in the receiver, notify an error."
^ self removeKey: key ifAbsent: [ self errorKeyNotFound ]
]

PCDictionary >> removeKey: key ifAbsent: aBlock
[
	"Remove key (and its associated value) from the receiver. If key is not in 
	the receiver, answer the result of evaluating aBlock. Otherwise, answer 
	the value externally named by key."
| index assoc |
index := self findElementOrNil: key.
assoc := array at: index.
assoc == nil
	ifTrue: [ ^ aBlock value ].
array at: index put: nil.
tally := tally - 1.
self fixCollisionsFrom: index.
^ assoc value
]

PCDictionary >> scanFor: anObject
[
	"Scan the key array for the first slot containing either a nil (indicating an empty slot) or an element that matches anObject. Answer the index of that slot or zero if no slot is found. This method will be overridden in various subclasses that have different interpretations for matching elements."
| element start finish |
start := anObject hash \\ array size + 1.
finish := array size.	"Search from (hash mod size) to the end."
start to: finish do: [ :index | 
	((element := array at: index) == nil or: [ element key = anObject ])
		ifTrue: [ ^ index ] ].	"Search from 1 to where we started."
1 to: start - 1 do: [ :index | 
	((element := array at: index) == nil or: [ element key = anObject ])
		ifTrue: [ ^ index ] ].
^ 0	"No match AND no empty slot"
]

PCDictionary >> select: aBlock
[
	"Evaluate aBlock with each of my values as the argument. Collect into a
	new dictionary, only those associations for which aBlock evaluates to
	true."
| newCollection |
newCollection := self species new.
self
	associationsDo: [ :each | 
		(aBlock value: each value)
			ifTrue: [ newCollection add: each ] ].
^ newCollection
]

PCDictionary class
	instanceVariables: #().

