PCProcess
	superclass: #PCObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#nextLink #suspendedContext #priority #myList #threadId #errorHandler );
	classVariables: #();
	package: #'PharoCandle-Kernel-Processes'.

PCProcess >> errorHandler
[
^ errorHandler
]

PCProcess >> errorHandler: aBlock
[
errorHandler := aBlock
]

PCProcess >> initSuspendedContext: aContext
[
suspendedContext := aContext.
priority := 1	"lowest priority"
]

PCProcess >> nextLink
[
^ nextLink
]

PCProcess >> nextLink: aLink
[
nextLink := aLink
]

PCProcess >> printOn: aStream
[
super printOn: aStream.
aStream nextPutAll: ' in '.
suspendedContext printOn: aStream
]

PCProcess >> priority
[
	"Answer the priority of the receiver."
^ priority
]

PCProcess >> priority: anInteger
[
	"Set the receiver's priority to anInteger. The priority is used by the VM as an index into the scheduler's array of process queues so it must be an integer between 1 and Processor highestPriority."
priority := (anInteger asInteger max: 1) min: Processor highestPriority
]

PCProcess >> resume
[
	"Primitive. Allow this process to proceed. Put the receiver in line to become the active process. Fail if the receiver is already waiting on a queue (i.e., on a Semaphore or on a scheduler queue). Essential. See Object documentation whatIsAPrimitive."
	<primitive: 87>
self primitiveFailed
]

PCProcess >> suspend
[
	"Primitive. Stop this process in such a way that it can be restarted later (see resume). If the receiver is the active process, suspend it. Otherwise, remove the receiver from its suspended process list. Essential. See Object documentation whatIsAPrimitive."
	<primitive: 88>
Processor activeProcess == self
	ifTrue: [ self primitiveFailed ]
	ifFalse: [ 
		Processor remove: self ifAbsent: [ self error: 'This process was not active' ].
		myList := nil ]
]

PCProcess >> suspendedContext
[
^ suspendedContext
]

PCProcess >> terminate
[
	"Stop this process forever."
Processor activeProcess == self
	ifTrue: [ thisContext removeSelf suspend ]
	ifFalse: [ 
		myList
			ifNotNil: [ 
				myList remove: self ifAbsent: [  ].
				myList := nil ].
		suspendedContext := nil ]
]

PCProcess class
	instanceVariables: #().

PCProcess class >> for: aContext priority: anInteger
[
	"Answer an instance of me for the given context (usually a Block) at the given priority."
^ self new
	initSuspendedContext: aContext;
	priority: anInteger
]

