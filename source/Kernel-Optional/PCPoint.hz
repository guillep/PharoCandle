PCPoint
	superclass: #PCObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#x #y );
	classVariables: #();
	package: #'PharoCandle-Kernel-Optional'.

PCPoint >> * arg
[
	"Answer a Point that is the product of the receiver and arg."
arg isPoint
	ifTrue: [ ^ (x * arg x) @ (y * arg y) ].
^ arg adaptToPoint: self andSend: #*
]

PCPoint >> + arg
[
	"Answer a Point that is the sum of the receiver and arg."
arg isPoint
	ifTrue: [ ^ (x + arg x) @ (y + arg y) ].
^ arg adaptToPoint: self andSend: #+
]

PCPoint >> - arg
[
	"Answer a Point that is the difference of the receiver and arg."
arg isPoint
	ifTrue: [ ^ (x - arg x) @ (y - arg y) ].
^ arg adaptToPoint: self andSend: #-
]

PCPoint >> / arg
[
	"Answer a Point that is the quotient of the receiver and arg."
arg isPoint
	ifTrue: [ ^ (x / arg x) @ (y / arg y) ].
^ arg adaptToPoint: self andSend: #/
]

PCPoint >> // arg
[
	"Answer a Point that is the quotient of the receiver and arg."
arg isPoint
	ifTrue: [ ^ (x // arg x) @ (y // arg y) ].
^ arg adaptToPoint: self andSend: #//
]

PCPoint >> = aPoint
[
self species = aPoint species
	ifTrue: [ ^ x = aPoint x and: [ y = aPoint y ]	"Refer to the comment in Object|=." ]
	ifFalse: [ ^ false ]
]

PCPoint >> abs
[
	"Answer a Point whose x and y are the absolute values of the receiver's x and y."
^ x abs @ y abs
]

PCPoint >> adaptToFloat: rcvr andSend: selector
[
	"If I am involved in arithmetic with a Float, convert it to a Point."
^ rcvr @ rcvr perform: selector with: self
]

PCPoint >> adaptToInteger: rcvr andSend: selector
[
	"If I am involved in arithmetic with an Integer, convert it to a Point."
^ rcvr @ rcvr perform: selector with: self
]

PCPoint >> asPoint
[
	"Answer the receiver itself."
^ self
]

PCPoint >> crossProduct: aPoint
[
	"Answer a number that is the cross product of the receiver and the argument, aPoint."
^ x * aPoint y - (y * aPoint x)
]

PCPoint >> degrees
[
	"Answer the angle the receiver makes with origin in degrees. Right is 0; down is 90."
| tan theta |
x = 0
	ifTrue: [ 
		y >= 0
			ifTrue: [ ^ 90.0 ]
			ifFalse: [ ^ 270.0 ] ]
	ifFalse: [ 
		tan := y asFloat / x asFloat.
		theta := tan arcTan.
		x >= 0
			ifTrue: [ 
				y >= 0
					ifTrue: [ ^ theta radiansToDegrees ]
					ifFalse: [ ^ 360.0 + theta radiansToDegrees ] ]
			ifFalse: [ ^ 180.0 + theta radiansToDegrees ] ]
]

PCPoint >> dist: aPoint
[
	"Answer the distance between aPoint and the receiver."
^ (aPoint - self) r
]

PCPoint >> dotProduct: aPoint
[
	"Answer a number that is the dot product of the receiver and the argument."
^ x * aPoint x + (y * aPoint y)
]

PCPoint >> hash
[
	"Hash is reimplemented because = is implemented."
^ (x hash bitShift: 2) bitXor: y hash
]

PCPoint >> max: aPoint
[
	"Answer a new Point whose x and y are the maximum of the receiver and the argument point x and y."
^ (x max: aPoint x) @ (y max: aPoint y)
]

PCPoint >> min: aPoint
[
	"Answer a new Point whose x and y are the minimum of the receiver's and the argument point's x and y."
^ (x min: aPoint x) @ (y min: aPoint y)
]

PCPoint >> negated
[
	"Answer a point whose x and y coordinates are the negatives of those of the receiver."
^ x negated @ y negated
]

PCPoint >> printOn: aStream
[
	"The receiver prints on aStream in terms of infix notation."
x printOn: aStream.
aStream nextPut: $@.
y printOn: aStream
]

PCPoint >> r
[
	"Answer the receiver's radius in polar coordinate system."
^ (x * x + (y * y)) sqrt
]

PCPoint >> rounded
[
	"Answer a Point that is the receiver's x and y rounded. Answer the receiver if its coordinates are already integral."
(x isInteger and: [ y isInteger ])
	ifTrue: [ ^ self ].
^ x rounded @ y rounded
]

PCPoint >> setR: rho degrees: theta
[
| radians |
radians := theta asFloat degreesToRadians.
x := rho asFloat * radians cos.
y := rho asFloat * radians sin
]

PCPoint >> setX: xValue setY: yValue
[
x := xValue.
y := yValue
]

PCPoint >> theta
[
	"Answer the angle the receiver makes with origin in radians. See degrees."
| tan theta |
x = 0
	ifTrue: [ 
		y >= 0
			ifTrue: [ ^ 1.5708	"90.0 degreesToRadians" ]
			ifFalse: [ ^ 4.71239	"270.0 degreesToRadians" ] ]
	ifFalse: [ 
		tan := y asFloat / x asFloat.
		theta := tan arcTan.
		x >= 0
			ifTrue: [ 
				y >= 0
					ifTrue: [ ^ theta ]
					ifFalse: [ ^ 360.0 degreesToRadians + theta ] ]
			ifFalse: [ ^ 180.0 degreesToRadians + theta ] ]
]

PCPoint >> truncated
[
	"Answer a Point whose x and y coordinates are integers. Answer the receiver if its coordinates are already integral."
(x isInteger and: [ y isInteger ])
	ifTrue: [ ^ self ].
^ x truncated @ y truncated
]

PCPoint >> x
[
^ x
]

PCPoint >> y
[
^ y
]

PCPoint class
	instanceVariables: #().

PCPoint class >> r: rho degrees: theta
[
	"Answer an instance of me with polar coordinates rho and theta."
^ self new setR: rho degrees: theta
]

PCPoint class >> x: xValue y: yValue
[
	"Answer an instance of me with the given coordinates."
^ self new setX: xValue setY: yValue
]

