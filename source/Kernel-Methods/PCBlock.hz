PCBlock
	superclass: #PCObject;
	instanceSpecification: #(#variable #pointers #words );
	instanceVariables: #(#outerContext #startpc #numArgs );
	classVariables: #();
	package: #'PharoCandle-Kernel-Methods'.

PCBlock >> asContext
[
	"Create a MethodContext that is ready to execute self.  Assumes self takes no args (if it does the args will be nil)"
	^ self asContextWithSender: nil
]

PCBlock >> asContextWithSender: aContext
[
	"Inner private support method for evaluation.  Do not use unless you know what you're doing."
	^ (PCContext newForMethod: outerContext method)
		setSender: aContext
			receiver: outerContext receiver
			method: outerContext method
			closure: self
			startpc: startpc;
		privRefresh
]

PCBlock >> home
[
	^ outerContext home
]

PCBlock >> ifError: errorHandlerBlock
[
	"Evaluate the block represented by the receiver, and normally return it's value.  If an error occurs, the errorHandlerBlock is evaluated, and it's value is instead returned.  The errorHandlerBlock must accept zero, one, or two parameters (the error message and the receiver).	Examples:		[1 whatsUpDoc] ifError: [:err :rcvr | 'huh?'].		[1 / 0] ifError: [:err :rcvr |			'ZeroDivide' = err				ifTrue: [Float infinity]				ifFalse: [self error: err]]"	^ self on: PCError do: [ :ex | errorHandlerBlock cull: ex description cull: ex receiver]
]

PCBlock >> on: exception do: handlerAction
[	"Evaluate the receiver in the scope of an exception handler.	"	| handlerActive |	"The following primitive is just a marker used to find the error handling context. 	see MethodContext>>#isHandlerContext "	<primitive: 199> 	
	handlerActive := true.	^ self value
]

PCBlock >> ifCurtailed: aBlock
[	"Evaluate the receiver with an abnormal termination action.	 Evaluate aBlock only if execution is unwound during execution	 of the receiver.  If execution of the receiver finishes normally do	 not evaluate aBlock.  N.B.  This method is *not* implemented as a	 primitive.  Primitive 198 always fails.  The VM uses prim 198 in a	 context's method as the mark for an ensure:/ifCurtailed: activation."	| complete result |	<primitive: 198>	result := self valueNoContextSwitch.	complete := true.	^result
]

PCBlock >> ensure: aBlock
[	"Evaluate a termination block after evaluating the receiver, regardless of	 whether the receiver's evaluation completes.  N.B.  This method is *not*	 implemented as a primitive.  Primitive 198 always fails.  The VM uses prim	 198 in a context's method as the mark for an ensure:/ifCurtailed: activation."	| complete returnValue |	<primitive: 198>	returnValue := self valueNoContextSwitch.	complete ifNil:[		complete := true.		aBlock value.	].	^ returnValue
]

PCBlock >> method
[
	^ self home method
]

PCBlock >> msecs
[
	"Answer the number of milliseconds it took to evaluate this block."
	| startMSecs |
	startMSecs := PCSystem milliseconds.
	self value.
	^ PCSystem milliseconds - startMSecs
]

PCBlock >> numArgs
[
	^ numArgs
]

PCBlock >> numCopiedValues
[
	"Answer the number of copied values of the receiver.  Since these are
	 stored in the receiver's indexable fields this is the receiver's basic size.
	 Primitive. Answer the number of indexable variables in the receiver. 
	 This value is the same as the largest legal subscript."
	<primitive: 62>
	^ self basicSize
]

PCBlock >> outerContext
[
	^ outerContext
]

PCBlock >> value
[
	"Evaluate this block without any arguments."
	<primitive: 201>
	^ self valueWithArguments: #()
]

PCBlock >> value: arg
[
	"Evaluate this block with one argument."
	<primitive: 202>
	^ self valueWithArguments: (PCArray with: arg)
]

PCBlock >> value: arg1 value: arg2
[
	"Evaluate this block with two arguments."
	<primitive: 203>
	^ self valueWithArguments: (PCArray with: arg1 with: arg2)
]

PCBlock >> valueWithArguments: anArray
[
	"Primitive. Evaluate the block represented by the receiver. The argument is an Array whose elements are the arguments for the block. Fail if the length of the Array is not the same as the the number of arguments that the block was expecting. Fail if the block is already being executed. Essential. See Object documentation whatIsAPrimitive."
	<primitive: 206>
	anArray size = numArgs
		ifTrue: [ self error: 'Attempt to evaluate a block that is already being evaluated.' ]
		ifFalse: [ self error: 'This block requires ' , numArgs printString , ' arguments.' ]
]

PCBlock >> valueNoContextSwitch
[	"An exact copy of BlockClosure>>value except that this version will not preempt	 the current process on block activation if a higher-priority process is runnable.	 Primitive. Essential."	<primitive: 221>	numArgs ~= 0 ifTrue:		[self numArgsError: 0].	PCError signal
]

PCBlock >> cull: anArg
[	^ numArgs = 0 		ifTrue: [self value]		ifFalse: [self value: anArg]	
]

PCBlock >> cull: firstArg cull: secondArg
[	^numArgs < 2 		ifTrue: [self cull: firstArg]		ifFalse: [self value: firstArg value: secondArg]]	

PCBlock class
	instanceVariables: #().

